#!/bin/bash

# Only initialze if not before
# Check by checking mysql folder inside the data directory
if [ ! -d "/var/lib/mysql/mysql" ]; then

  # Initialize MySQL insecurely
  echo "Initializing MySQL insecurely"
  mysqld --initialize-insecure --datadir=/var/lib/mysql --ignore-db-dir=lost+found
  echo 'Starting MySQL server with disabled networking ...'
  mysqld \
    --skip-networking &
  mysql_pid=$!

  # Poll unti MySQL starts responding
  started=false
  while ! $started; do
    if [ -d "/proc/$mysql_pid" ]; then
      mysqladmin ping &>/dev/null && echo "MySQL started successfully" && started=true
    fi
    echo "Waiting for MySQL to start ..."
    sleep 1
  done

  mysql_flags="-u root"
  # If a user is specified create it
  if [ -v MYSQL_USER ]; then
          echo "Creating user specified by MYSQL_USER (${MYSQL_USER}) ..."
          mysql $mysql_flags <<EOSQL
      CREATE USER '${MYSQL_USER}'@'%' IDENTIFIED BY '${MYSQL_PASSWORD}';
EOSQL
  fi

  # If a database is specified create it
  if [ -v MYSQL_DATABASE ]; then
      echo "Creating database ${MYSQL_DATABASE} ..."
          mysqladmin $admin_flags create "${MYSQL_DATABASE}"
      if [ -v MYSQL_USER ]; then
                  echo "Granting privileges to user ${MYSQL_USER} for ${MYSQL_DATABASE} ..."
                  mysql $mysql_flags <<EOSQL
          GRANT ALL ON \`${MYSQL_DATABASE}\`.* TO '${MYSQL_USER}'@'%' ;
          FLUSH PRIVILEGES ;
EOSQL
      fi
  fi

  if [ -v MYSQL_ROOT_PASSWORD ]; then
      echo "Setting password for MySQL root user ..."
          mysql $mysql_flags <<EOSQL
      CREATE USER IF NOT EXISTS 'root'@'%';
      GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '${MYSQL_ROOT_PASSWORD}' WITH GRANT OPTION;
EOSQL
  fi
  echo 'Initialization finished'

  echo "Importing databases if provided."
  for f in /docker-mysql-data.d/*; do
  	echo $f
  	case "$f" in
  		*.sh)     echo "$0: running $f"; . "$f" ;;
  		*.sql)    echo "$0: running $f"; mysql $mysql_flags < "$f"; echo ;;
  		*.sql.gz) echo "$0: running $f"; gunzip -c "$f" | mysql $mysql_flags; echo ;;
  		*)        echo "$0: ignoring $f" ;;
  	esac
  	echo
  done

  echo 'Shutting down MySQL ...'
  mysqladmin "--defaults-file=/etc/my.cnf" $mysql_flags flush-privileges shutdown
fi
echo 'Starting MySQL normally'
exec mysqld "$@" 2>&1

echo "Started"
echo ;;