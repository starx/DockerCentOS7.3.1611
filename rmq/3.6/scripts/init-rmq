#!/bin/bash

# usage: file_env VAR [DEFAULT]
#    ie: file_env 'XYZ_DB_PASSWORD' 'example'
# (will allow for "$XYZ_DB_PASSWORD_FILE" to fill in the value of
#  "$XYZ_DB_PASSWORD" from a file, especially for Docker's secrets feature)
file_env() {
  local var="$1"
  local fileVar="${var}_FILE"
  local def="${2:-}"
  if [ "${!var:-}" ] && [ "${!fileVar:-}" ]; then
    echo >&2 "error: both $var and $fileVar are set (but are exclusive)"
    exit 1
  fi
  local val="$def"
  if [ "${!var:-}" ]; then
    val="${!var}"
  elif [ "${!fileVar:-}" ]; then
    val="$(< "${!fileVar}")"
  fi
  export "$var"="$val"
  unset "$fileVar"
}

file_env 'RABBITMQ_DEFAULT_USER'
file_env 'RABBITMQ_DEFAULT_PASS'
file_env 'RABBITMQ_DEFAULT_VHOST'

# Default VHOST
# echo "Starting RabbitMQ in detached mode"
# rabbitmq-server -detached

DEFAULT_VHOST_PATH=/
# If a vhost is specified create it
if [ "$RABBITMQ_DEFAULT_VHOST" ]; then
  echo "Creating vhost: ${RABBITMQ_DEFAULT_VHOST}"
  rabbitmqctl add_vhost $RABBITMQ_DEFAULT_VHOST
  DEFAULT_VHOST_PATH="${DEFAULT_VHOST_PATH}${RABBITMQ_DEFAULT_VHOST}"
fi

# If a user is specified create it
if [ "$RABBITMQ_DEFAULT_USER" -a "$RABBITMQ_DEFAULT_PASS" ]; then
  echo "Creating user: ${RABBITMQ_DEFAULT_USER}"
  rabbitmqctl add_user $RABBITMQ_DEFAULT_USER $RABBITMQ_DEFAULT_PASS
  rabbitmqctl set_user_tags $RABBITMQ_DEFAULT_USER administrator
  rabbitmqctl set_permissions -p $DEFAULT_VHOST_PATH $RABBITMQ_DEFAULT_USER ".*" ".*" ".*"
fi

# echo "Stopping RabbitMQ Server"
# rabbitmq-server stop

echo 'Starting RabbitMQ in foregroud'
exec rabbitmq-server "$@" 2>&1